// package adapter_test

// import (
// 	"context"
// 	"testing"

// 	//	_ "github.com/go-sql-driver/mysql"
// 	"github.com/jmoiron/sqlx"
// 	_ "github.com/lib/pq"

// 	//	_ "github.com/mattn/go-sqlite3"
// 	"github.com/stretchr/testify/require"
// 	"gitlab.com/theztd/troll/internal/adapter"
// 	"gitlab.com/theztd/troll/internal/config"

// 	//	tcmysql "github.com/testcontainers/testcontainers-go/modules/mysql"
// 	tcpostgres "github.com/testcontainers/testcontainers-go/modules/postgres"
// )

// type dbConfig struct {
// 	driver string
// 	dsn    string
// 	setup  string
// }

// func setupSQLite(t *testing.T) dbConfig {
// 	dsn := ":memory:"
// 	dbConn, err := sqlx.Connect("sqlite3", dsn)
// 	require.NoError(t, err)

// 	_, err = dbConn.Exec("PRAGMA foreign_keys=ON;")
// 	require.NoError(t, err)
// 	dbConn.Close()

// 	return dbConfig{
// 		driver: "sqlite3",
// 		dsn:    dsn,
// 	}
// }

// func setupPostgres(t *testing.T) dbConfig {
// 	ctx := context.Background()
// 	container, err := tcpostgres.RunContainer(ctx)
// 	require.NoError(t, err)
// 	t.Cleanup(func() { _ = container.Terminate(ctx) })

// 	dsn, err := container.ConnectionString(ctx, "sslmode=disable")
// 	require.NoError(t, err)

// 	return dbConfig{
// 		driver: "postgres",
// 		dsn:    dsn,
// 	}
// }

// // func setupMySQL(t *testing.T) dbConfig {
// // 	ctx := context.Background()
// // 	container, err := tcmysql.RunContainer(ctx)
// // 	require.NoError(t, err)
// // 	t.Cleanup(func() { _ = container.Terminate(ctx) })

// // 	dsn, err := container.ConnectionString(ctx)
// // 	require.NoError(t, err)

// // 	return dbConfig{
// // 		driver: "mysql",
// // 		dsn:    dsn,
// // 	}
// // }

// func TestRunQuery_AllDrivers(t *testing.T) {
// 	drivers := []struct {
// 		name  string
// 		setup func(*testing.T) dbConfig
// 	}{
// 		{"sqlite", setupSQLite},
// 		{"postgres", setupPostgres},
// 		//		{"mysql", setupMySQL},
// 	}

// 	for _, drv := range drivers {
// 		t.Run(drv.name, func(t *testing.T) {
// 			cfg := drv.setup(t)
// 			config.DSN = cfg.dsn // Předpokládáme globální config.DSN

// 			dbConn, err := sqlx.Connect(cfg.driver, cfg.dsn)
// 			require.NoError(t, err)
// 			defer dbConn.Close()

// 			// Test 1: existující tabulka, 5 záznamů
// 			_, err = dbConn.Exec(`
// 				CREATE TABLE employee (
// 					id INTEGER PRIMARY KEY,
// 					name TEXT
// 				);
// 				INSERT INTO employee (id, name) VALUES
// 				(1, 'Alice'), (2, 'Bob'), (3, 'Carol'), (4, 'Dave'), (5, 'Eve');
// 			`)
// 			require.NoError(t, err)

// 			res, err := adapter.RunQuery("SELECT * FROM employee")
// 			require.NoError(t, err)
// 			require.Len(t, res, 5)

// 			// Test 2: tabulka existuje, ale je prázdná
// 			_, err = dbConn.Exec("DELETE FROM employee;")
// 			require.NoError(t, err)
// 			res, err = adapter.RunQuery("SELECT * FROM employee")
// 			require.NoError(t, err)
// 			require.Len(t, res, 0)

// 			// Test 3: tabulka neexistuje
// 			_, err = adapter.RunQuery("SELECT * FROM nonexistent")
// 			require.Error(t, err)
// 		})
// 	}
// }
